{"version":3,"sources":["button.js","carthdr.js","cartTotal.js","displaypage.js","App.js","serviceWorker.js","index.js"],"names":["Button","type","className","onClick","props","addedtoCart","productId","Component","Cart","this","totalValue","CartTotal","totalAmount","DisplayList","getProductList","bind","console","log","productDetails","map","list","index","key","src","url","height","width","alt","product","quantity","id","price","Offer_price","addProducts","quant","subtractProducts","cartvalue","totalprice","App","checkoutPrice","state","productList","listofProducts","prodQuan","checkoutCount","newState","item","setState","cartValue","totalPrice","amount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wuDAEqBA,G,uLACV,IAAD,OAGN,OACM,6BACE,4BAAQC,KAAK,cAAcC,UAAU,aAAaC,QAAS,kBAAK,EAAKC,MAAMC,YAAY,EAAKD,MAAME,aAAlG,oB,GANwBC,cCAfC,E,iLAEjB,OACE,6BACE,6CAAmBC,KAAKL,MAAMM,WAA9B,U,GAJ0BH,aCAbI,E,iLAEjB,OACM,6BACC,gDACqBF,KAAKL,MAAMQ,kB,GALJL,aCIlBM,E,YACnB,aAAc,IAAD,8BACX,+CACKC,eAAe,EAAKA,eAAeC,KAApB,gBAFT,E,8EAII,IAAD,OAEd,OADAC,QAAQC,IAAI,mBAAoBR,KAAKL,OAC9BK,KAAKL,MAAMc,eAAeC,KAAI,SAACC,EAAMC,GAC1C,OACI,yBAAKnB,UAAU,WAAWoB,IAAKD,GAC7B,yBAAKnB,UAAU,aACb,6BACE,yBAAKqB,IAAM,mBAAmBH,EAAKI,IAAKC,OAAO,MAAMC,MAAM,MAAMC,IAAI,kBACvE,6BACA,8BAAOP,EAAKQ,QAAS,KAAMR,EAAKS,UAChC,6BACA,kBAAC,EAAD,CAAQvB,UAAWc,EAAKU,GAAIzB,YAAa,EAAKD,MAAMC,eAEtD,yBAAKH,UAAU,sBACb,yBAAKA,UAAU,SACd,wCAAckB,EAAKW,QAEpB,yBAAK7B,UAAU,eACd,iDAAuBkB,EAAKY,cAE7B,yBAAK9B,UAAU,QAAQoB,IAAKF,EAAKU,IAChC,4BAAQ7B,KAAK,aACXE,QAAS,kBAAK,EAAKC,MAAM6B,YAAYb,EAAKU,MAD5C,KAEA,8BAAO,IAAIV,EAAKc,MAAM,KACtB,4BAAQjC,KAAK,gBACXE,QAAS,kBAAK,EAAKC,MAAM+B,iBAAiBf,EAAKU,MADjD,a,+BASX,OACE,yBAAK5B,UAAU,6BACf,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAMQ,WAAYD,KAAKL,MAAMgC,aAE/B,yBAAMlC,UAAU,yBACdO,KAAKK,kBAEP,yBAAKZ,UAAU,eACd,kBAAC,EAAD,CAAWU,YAAaH,KAAKL,MAAMiC,mB,GA/CD9B,aCqE1B+B,E,YApEb,aAAc,IAAD,8BACX,+CACKL,YAAY,EAAKA,YAAYlB,KAAjB,gBACjB,EAAKoB,iBAAiB,EAAKA,iBAAiBpB,KAAtB,gBACtB,EAAKV,YAAY,EAAKA,YAAYU,KAAjB,gBACjB,EAAKwB,cAAc,EAAKA,cAAcxB,KAAnB,gBACnB,EAAKyB,MAAQ,CACXC,YAAaC,EACbC,SAAS,GACTC,cAAe,EACfP,WAAY,GAVH,E,yEAcHP,GACV,IAAIe,EAAWpC,KAAK+B,MAAMC,YAAYtB,KAAI,SAAC2B,GAIzC,OAHGA,EAAKhB,KAAOA,GACbgB,EAAKZ,QAEAY,KAETrC,KAAKsC,SAAS,CAACN,YAAYI,M,uCAGZf,GACf,IAAIe,EAAWpC,KAAK+B,MAAMC,YAAYtB,KAAI,SAAC2B,GAIzC,OAHGA,EAAKhB,KAAOA,GAAMgB,EAAKZ,MAAQ,GAChCY,EAAKZ,QAEAY,KAETrC,KAAKsC,SAAS,CAACN,YAAYI,M,kCAGjBf,GACZ,IAAIkB,EAAY,EAChBvC,KAAK+B,MAAMC,YAAYtB,KAAI,SAACC,GAC1B4B,GAAa5B,EAAKc,SAEpBzB,KAAK8B,gBACL9B,KAAKsC,SAAS,CAACH,cAAeI,M,sCAI5B,IAAIC,EAAa,EACjBxC,KAAK+B,MAAMC,YAAYtB,KAAI,SAACC,GAC1B,IAAI8B,EAAS9B,EAAKc,MAAQd,EAAKY,YAC/BhB,QAAQC,IAAI,iBAAkBG,EAAKQ,SACnCZ,QAAQC,IAAI,mBAAoBiC,GAChCD,GAA0BC,EAC1BlC,QAAQC,IAAI,sBAAuBgC,MAErCxC,KAAKsC,SAAS,CAACV,WAAYY,M,+BAM3B,OADAjC,QAAQC,IAAI,yBAET,yBAAKf,UAAU,OACb,yBAAKA,UAAU,wCACd,kBAAC,EAAD,CAAagB,eAAgBT,KAAK+B,MAAMC,YAAaR,YAAaxB,KAAKwB,YAAaE,iBAAkB1B,KAAK0B,iBAAkBC,UAAW3B,KAAK+B,MAAMI,cAAevC,YAAaI,KAAKJ,YAAagC,WAAY5B,KAAK+B,MAAMH,mB,GA9D9M9B,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eea3d9bb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class Button extends Component{\r\n  render(){\r\n    // console.log(\"====prps======\", this)\r\n\r\n    return(\r\n          <div>\r\n            <button type=\"button_comp\" className=\"button-div\" onClick={()=> this.props.addedtoCart(this.props.productId)}>Add to Cart</button>\r\n         </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class Cart extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h3>Shopping Cart({this.props.totalValue})</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class CartTotal extends Component{\r\n  render(){\r\n    return(\r\n          <div>\r\n           <h2>\r\n              Total Amount: Rs {this.props.totalAmount}\r\n           </h2>\r\n         </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport \"./App.css\"\r\nimport Button from \"./button\";\r\nimport Cart from \"./carthdr\";\r\nimport CartTotal from \"./cartTotal\";\r\n\r\nexport default class DisplayList extends Component{\r\n  constructor(){\r\n    super();\r\n    this.getProductList=this.getProductList.bind(this);\r\n  }\r\n  getProductList(){\r\n    console.log(\"=====props======\", this.props)\r\n    return this.props.productDetails.map((list, index)=>{\r\n      return(\r\n          <div className=\"Prodlist\" key={index}>\r\n            <div className=\"prodImage\">\r\n              <br />\r\n                <img src= {'../ShoppingCart/'+list.url} height=\"100\" width=\"100\" alt=\"Product Image\"/>\r\n              <br />\r\n              <span>{list.product +\"  \"+ list.quantity}</span>\r\n              <br />\r\n              <Button productId={list.id} addedtoCart={this.props.addedtoCart}/>\r\n            </div>\r\n            <div className=\"Right-side-details\">\r\n              <div className=\"price\">\r\n               <span>MRP: Rs{list.price}</span>\r\n              </div>\r\n              <div className=\"offer-price\">\r\n               <span>Offer Price: Rs {list.Offer_price}</span>\r\n              </div>\r\n              <div className=\"quant\" key={list.id}>\r\n               <button type=\"add_button\"\r\n                 onClick={()=> this.props.addProducts(list.id)}>+</button>\r\n               <span>{\" \"+list.quant+\" \"}</span>\r\n               <button type=\"subtract_comp\"\r\n                 onClick={()=> this.props.subtractProducts(list.id)}>-</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      )\r\n    })\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Main-Cart main-cart-extra\">\r\n      <div className=\"ShoppingCart\">\r\n        <Cart totalValue={this.props.cartvalue} />\r\n      </div>\r\n      <div  className=\"product-details-extra\">\r\n       {this.getProductList()}\r\n      </div>\r\n      <div className=\"TotalAmount\">\r\n       <CartTotal totalAmount={this.props.totalprice} />\r\n     </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\nimport listofProducts from './productDetails.json';\nimport DisplayList from './displaypage';\nimport Button from \"./button\";\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.addProducts=this.addProducts.bind(this);\n    this.subtractProducts=this.subtractProducts.bind(this);\n    this.addedtoCart=this.addedtoCart.bind(this);\n    this.checkoutPrice=this.checkoutPrice.bind(this);\n    this.state = {\n      productList: listofProducts,\n      prodQuan:\"\",\n      checkoutCount: 0,\n      totalprice: 0\n    };\n  }\n\naddProducts(id){\n  let newState = this.state.productList.map((item) => {\n    if(item.id === id){\n      item.quant++;\n    }\n    return item;\n  });\n  this.setState({productList:newState})\n}\n\nsubtractProducts(id){\n  let newState = this.state.productList.map((item) => {\n    if(item.id === id && item.quant > 0){\n      item.quant--;\n    }\n    return item;\n  });\n  this.setState({productList:newState})\n}\n\naddedtoCart(id){\nlet cartValue = 0;\nthis.state.productList.map((list) => {\n  cartValue += list.quant;\n});\nthis.checkoutPrice();\nthis.setState({checkoutCount: cartValue});\n}\n\ncheckoutPrice(){\n  let totalPrice = 0;\n  this.state.productList.map((list) => {\n    let amount = list.quant * list.Offer_price;\n    console.log(\"===product====\", list.product)\n    console.log(\"====off price===\", amount );\n    totalPrice = totalPrice + amount;\n    console.log(\"-----totalPrice----\", totalPrice);\n  });\n  this.setState({totalprice: totalPrice});\n  }\n\n\nrender() {\n  console.log(\"======render=========\")\n  return(\n     <div className=\"App\">\n       <div className=\"productDetails product-details-extra\">\n        <DisplayList productDetails={this.state.productList} addProducts={this.addProducts} subtractProducts={this.subtractProducts} cartvalue={this.state.checkoutCount} addedtoCart={this.addedtoCart} totalprice={this.state.totalprice}/>\n       </div>\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}